developing the ecommerce with mern stack 

writing the node services 

> create the folder server
> server 

> and switch to server folder 
> cd server 

> then download the node modules 


step 1.
	create the directory (folder)

	Ex.
		 server


step 2.
	switch to server directory

	> cd server


step 3.
	download node modules

	1) bcryptjs
		- used to encrypt the passwords

		- encrypted passwords only we should store in database.

	2) express

		- used to develop the rest services.

		Ex.
			GET
			POST
			PUT
			DELETE
			----
			----
			----

	3) express-async-handler

		- used to handle the rest api calls asynchronously.

	4) body-parser

		- used to receive the data from client application.

	5) cors

		- cors module used to enable the cors policy.

	6) jsonwebtoken

		- used to generate the tokens.

		- in general, we will use these tokens for "token based authentication"

	7) mongodb

		 - mongodb module used to connect to "mongodb" database without "schema".

	8) mongoose

		- mongoose library used to connect to mongodb database with schema (rules and regulations)

	9) dotenv

		- used to configure the environmental variables related to nodejs server


	> 




	***** integrate rest api call to reactjs *****


step 1.
	create the react application

		> npx create-react-app ecommerce --template typescript

			where "ecommerce" is the name of the react application

step 2.
	switch to react application

		> cd ecommerce

step 3.
	download the libraries

		=> axios @types/axios

		=> redux @types/redux

		=> react-redux  @types/react-redux

		=> redux-thunk  @types/redux-thunk

		=> react-router-dom @types/react-router-dom


		> yarn add axios @types/axios redux @types/redux react-redux @types/react-redux redux-thunk @types/redux-thunk react-router-dom @types/react-router-dom --save


step 4.
	implement the thunk application

		=> create the model

		=> create the types

		=> create the actions

		=> create the reducer

		=> create the store

		=> dispatch & subscription operation


create the model
----------------

****************************************
ecommerce
		src
		   model
		      Product.tsx
***************************************

	finally "Product" model is ready



create the types
----------------

*****************************************
ecommerce
		src
		  app
		    types
			  ProductActionTypes.tsx
*****************************************

		finally "ProductsActionTypes" are ready.


		********************************************************
ecommerce
       src
	     screens
		   HomeScreen.tsx
********************************************************


									***** create the single page application *****

	- in our "ecommerce" project, "App" component is "master" component.

	- we want to make "HomeScreen" as default component in single page application.
	


    


